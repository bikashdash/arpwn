
import sys, os
from winappdbg import *

'''
ar_buggery_auto.py, sebastian apelt, siberas, 2016
winappdbg script to simpulate the write-0 vulnerability as described in my syscan360 slides

usage: ar_buggery_auto.py <path to acrord32.exe> <pdf> <isPropertySpecified-offset>

how to get the isPropertySpecified-offset: 
use the XFAnalyze_func.py script or add acroform.pdb and do "? AcroForm!METHOD_node_isPropertySpecified - Acroform" in Windbg
'''

if len(sys.argv) < 4:
	print "%s <path to acrord32.exe> <pdf> <isPropertySpecified-offset>" % sys.argv[0]
	sys.exit(1)
	
acrord32 = sys.argv[1]
pdf = sys.argv[2]
bp_offset = int(sys.argv[3], 16)

if not os.path.exists(acrord32):
	print "could not find acrord32.exe binary '%s'" % acrord32
	sys.exit(1)

if not os.path.exists(pdf):
	print "could not find target pdf '%s'" % pdf
	sys.exit(1)	
		
def bp_callback( event ):
	process = event.get_process()
	stackaddr   = event.get_thread().get_sp()
	# ".printf \"DBG: %ma\\r\\n\", poi(poi(esp+c)+10);"
	address = process.read_pointer(process.read_pointer(stackaddr + 0x0c) + 0x10)
	dbgstr = process.peek_string(address)
	if dbgstr.startswith("write0:") == True:
		targetaddr = int(dbgstr.split("write0:")[-1], 16)
		print "[!] perform write0 to targetaddress 0x%x" % targetaddr
		process.write_uint(targetaddr, 0)
	else:
		print dbgstr
	

bpset = False
def cbhandler(event):
	global bpset
	code = event.get_event_code()
	
	if code == win32.EXCEPTION_DEBUG_EVENT:
		name = event.get_exception_description()
		code = event.get_exception_code()
		try:
			exc_address = event.get_fault_address()
		except NotImplementedError:
			exc_address = event.get_exception_address()
   
	elif code == win32.LOAD_DLL_DEBUG_EVENT:
		filename = event.get_filename()
		if filename.lower().find("acroform") != -1 and bpset == False:
			module = event.get_module()
			global bp_offset
			bp_address = module.get_base() + bp_offset
			print "[i] set breakpoint @ 0x%x" % bp_address
			event.debug.break_at( event.get_pid(), bp_address, bp_callback )				
			bpset = True
			

debug = Debug(cbhandler, bKillOnExit = True)
try:
    debug.execv([acrord32, pdf], bFollow = True)
    debug.loop()
finally:
    debug.stop()